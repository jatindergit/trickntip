<?php
 
if (!class_exists('WordPress_Advertize_It')) {

    /**
     * Main / front controller class
     */
    class WordPress_Advertize_It extends WPAI_Module
    {
        /**
         * @var array all readable properties
         */
        protected static $readable_properties = array(); // These should really be constants, but PHP doesn't allow class constants to be arrays
        /**
         * @var array all writable properties
         */
        protected static $writeable_properties = array();
        /**
         * @var array all plugin modules
         */
        protected $modules;

        /**
         * Plugin version
         */
        const VERSION = '1.2.1';
        /**
         * Prefix used to identify things related to this plugin
         */
        const PREFIX = 'wpai_';
        /**
         * Whether debug mode is switched on or not. Not used currently.
         */
        const DEBUG_MODE = false;


        /*
         * Magic methods
         */

        /**
         * Constructor
         *
         * @mvc Controller
         */
        protected function __construct()
        {
            $this->register_hook_callbacks();

            $this->modules = array(
                'WPAI_Settings' => WPAI_Settings::get_instance(),
            	'WPAI_Offers' => WPAI_Offers::get_instance()
            );
        }

        /*
         * Static methods
         */

        /**
         * Enqueues CSS, JavaScript, etc
         *
         * @mvc Controller
         */
        public static function load_resources()
        {
            wp_register_script(
                self::PREFIX . 'wp-advertize-it',
                plugins_url('javascript/wp-advertize-it.js', dirname(__FILE__)),
                array('jquery'),
                self::VERSION,
                true
            );

            wp_register_script(
                self::PREFIX . 'wp-advertize-it-admin',
                plugins_url('javascript/wp-advertize-it-admin.js', dirname(__FILE__)),
                array('jquery'),
                self::VERSION,
                true
            );

            wp_register_script(
                self::PREFIX . 'ace',
                plugins_url('ace/ace.js', dirname(__FILE__)),
                array('jquery'),
                self::VERSION,
                true
            );

            wp_register_style(
                self::PREFIX . 'admin',
                plugins_url('css/admin.css', dirname(__FILE__)),
                array(),
                self::VERSION,
                'all'
            );

            if (is_admin()) {
                if (!did_action('wp_enqueue_media')) {
                    wp_enqueue_media();
                }
                wp_enqueue_style(self::PREFIX . 'admin');
                wp_enqueue_script(self::PREFIX . 'wp-advertize-it-admin');
                wp_enqueue_script(self::PREFIX . 'ace');
                wp_enqueue_script('jquery-ui-dialog');
                wp_enqueue_style("wp-jquery-ui-dialog");
            } else {
                wp_enqueue_script(self::PREFIX . 'wp-advertize-it');
            }
        }

        /**
         * Clears caches of content generated by caching plugins like WP Super Cache
         *
         * @mvc Model
         */
        public static function clear_caching_plugins()
        {
            // WP Super Cache
            if (function_exists('wp_cache_clear_cache')) {
                wp_cache_clear_cache();
            }

            // W3 Total Cache
            if (class_exists('W3_Plugin_TotalCacheAdmin')) {
                $w3_total_cache = w3_instance('W3_Plugin_TotalCacheAdmin');

                if (method_exists($w3_total_cache, 'flush_all')) {
                    $w3_total_cache->flush_all();
                }
            }

            // WP Engine
            if (class_exists('WpeCommon')) {
                WpeCommon::purge_memcached();
                WpeCommon::clear_maxcdn_cache();
                WpeCommon::purge_varnish_cache();
            }
        }

        /*
         * Instance methods
         */

        /**
         * Prepares sites to use the plugin during single or network-wide activation
         *
         * @mvc Controller
         *
         * @param bool $network_wide
         */
        public function activate($network_wide)
        {
            global $wpdb;

            if (function_exists('is_multisite') && is_multisite()) {
                if ($network_wide) {
                    $blogs = $wpdb->get_col("SELECT blog_id FROM $wpdb->blogs");

                    foreach ($blogs as $blog) {
                        switch_to_blog($blog);
                        $this->single_activate($network_wide);
                    }

                    restore_current_blog();
                } else {
                    $this->single_activate($network_wide);
                }
            } else {
                $this->single_activate($network_wide);
            }
        }

        /**
         * Runs activation code on a new WPMS site when it's created
         *
         * @mvc Controller
         *
         * @param int $blog_id
         */
        public function activate_new_site($blog_id)
        {
            switch_to_blog($blog_id);
            $this->single_activate(true);
            restore_current_blog();
        }

        /**
         * Prepares a single blog to use the plugin
         *
         * @mvc Controller
         *
         * @param bool $network_wide
         */
        protected function single_activate($network_wide)
        {
            foreach ($this->modules as $module) {
                $module->activate($network_wide);
            }
        }

        /**
         * Rolls back activation procedures when de-activating the plugin
         *
         * @mvc Controller
         */
        public function deactivate()
        {
            foreach ($this->modules as $module) {
                $module->deactivate();
            }
        }

        /**
         * Register callbacks for actions and filters
         *
         * @mvc Controller
         */
        public function register_hook_callbacks()
        {
        	
        	load_plugin_textdomain( 'wpailang',FALSE,dirname( plugin_basename( __FILE__ ) ) . '/../langs');
        	
        	
        	add_action('wp_enqueue_scripts', 'wpai_ajaxurl', 0);
        	
            add_action('wpmu_new_blog', __CLASS__ . '::activate_new_site');
            add_action('wp_enqueue_scripts', __CLASS__ . '::load_resources');
            add_action('admin_enqueue_scripts', __CLASS__ . '::load_resources');

            add_action('init', array($this, 'init'));
            add_action('init', array($this, 'upgrade'), 11);

            add_action('init', array($this, 'editor_buttons'), 999);

            add_filter('the_content', array($this, 'show_ad_in_content'));
            add_action('wp_head', array($this, 'buffer_start'));
            add_action('wp_footer', array($this, 'buffer_end'));
            add_action('wp_footer', array($this, 'show_ad_below_footer'));
            add_action('comment_form', array($this, 'show_ad_below_comments'));
            add_action('the_post', array($this, 'show_ad_between_posts'));

            add_shortcode('showad', array($this, 'handle_short_code'));
            add_action('wp_ajax_get_ad_list', array($this, 'get_ad_list'));
        }

        /**
         * Callback called when the page buffering stops.
         * It checks whether an ad block is configured to be displayed at the beginning of the page and adds it just after the body tag.
         *
         * @param $buffer string page contents
         * @return string page contents containing the additional ad block before the body tag (if configured)
         */
        function buffering_callback($buffer)
        {
            $above_everything = "";

            $content = get_the_content();
            $blocks = $this->RemoveSuppressBlocks($this->modules['WPAI_Settings']->settings['blocks'], $content);
            $above_everything_block = $this->modules['WPAI_Settings']->settings['placements']['above-everything']->blockid;

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content) || $this->is_placement_suppress_specific('above-everything')) {
                return $buffer;
            }

            if ($above_everything_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['above_everything']->priority;
                $above_everything = WPAI_Settings::get_ad_block($blocks, $above_everything_block, $priority);
            }

            $matches = preg_split('/(<body.*?>)/i', $buffer, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
            $buffer = $matches[0] . $matches[1] . $above_everything . $matches[2];
            return $buffer;
        }

        /**
         * Starts buffering of the page contents and defines buffering_callback as call back when buffering ends.
         */
        function buffer_start()
        {
            ob_start(array($this, 'buffering_callback'));
        }

        /**
         * Ends buffering of the page contents.
         */
        function buffer_end()
        {
            //ob_end_flush();
            global $ads_list;
            $temp = ob_get_contents();
            ob_clean();
            $ads_count = substr_count($temp, 'START-WP-ADS-ID:');
            $max_ads_count = $this->modules['WPAI_Settings']->settings['options']['max-ads-count']->value;
            if (!isset($max_ads_count)){
            	$max_ads_count = 9999;
            }
            if($ads_count < $max_ads_count) {
                echo $temp;
                return;
            } 
            else {
                uasort($ads_list, array($this, 'compare_priority'));
                foreach ($ads_list as $ad_id => $ad) {
                    if($max_ads_count > 0) {
                        $max_ads_count--;
                    }
                    else {
                        unset($ads_list[$ad_id]);
                        //$ads_list[$ad_id]['content'] = "";
                    }
                }
                $pos = 0;
                while ( ($line_end_pos = strpos($temp, "<!-- END-WP-ADS-PRIO -->", $pos)) !== false ) {
                    $line = substr($temp, $pos, $line_end_pos - $pos);
                    // do something with $line
                    $ad_start_pos = strpos($line, "<!-- START-WP-ADS-ID:");
                    $ad_block = substr($line, $ad_start_pos, $line_end_pos - $ad_start_pos);
                    $ad_words = explode(" ", $ad_block);
                    for($i=0;$i<count($ad_words);$i++) {
                        if($ad_words[$i] == "START-WP-ADS-ID:") {
                            $ad_id = $ad_words[$i + 1];
                            break;
                        }
                    }
                    if(!isset($ads_list[$ad_id])) {
                       $temp = str_replace ($ad_block, "",$temp);
                    }
                    //str_replace ('Block1', 'BlockX',$temp);
                    $pos = $line_end_pos + strlen("<!-- END-WP-ADS-PRIO -->");
                }
                echo $temp;
            }
        }

        /**
         * Registers the button in the visual editor unless it is disabled in the settings or the user doesn't have the required rights.
         */
        function editor_buttons()
        {
            $options = $this->modules['WPAI_Settings']->settings['options'];
            if ((!isset($options['hide-editor-button']->value) || $options['hide-editor-button']->value != 1)
                && (current_user_can('edit_posts') || current_user_can('edit_pages'))
                && get_user_option('rich_editing')
            ) {
                add_filter('mce_external_plugins', array($this, 'add_buttons'));
                add_filter('mce_buttons', array($this, 'register_buttons'));
            }
        }

        /**
         * @param $plugin_array
         * @return mixed
         */
        function add_buttons($plugin_array)
        {
            $plugin_array['wpai'] = plugins_url('../javascript/shortcode.js', __file__);
            return $plugin_array;
        }

        /**
         * @param $buttons
         * @return mixed
         */
        function register_buttons($buttons)
        {
            array_push($buttons, 'showad');
            return $buttons;
        }

        /**
         * @param $attributes
         * @return string
         */
        function handle_short_code($attributes)
        {
            $ad_block = "";

            extract(shortcode_atts(array(
                'block' => ''
            ), $attributes));

            if (isset($block) && $block !== '') {
                return $this->get_ad_block($block);
            }

            return $ad_block;
        }

        /**
         * @param $block
         * @return string
         */
        function get_ad_block($block)
        {
            $ad_block = "";
            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            if (isset($blocks[intval($block)]) && isset($blocks[intval($block)]->default_ads)) {
                $ad_block = $blocks[intval($block)]->default_ads;
            }
            return $ad_block; //'<!-- ' + json_encode($blocks[intval($block)]) + '-->' +
        }

        /**
         * Displays the contents of a dialog allowing to choose and ad block to be displayed.
         */
        function get_ad_list()
        {
            $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
            ?>
            <!DOCTYPE html>
            <head>
                <title>WP Advertize It - Insert Ad Block</title>
            </head>
            <body>
            <p>
                <label for="ad-block-select"><?php _e('Ad Block:'); ?></label>
                <select class="widefat" id="ad-block-select"
                        name="ad-block-select">
                    <?php foreach ($blocks as $i => $block) : ?>
            <option style="padding-right: 10px;"
                    value="<?php echo esc_attr(($i)); ?>"><?php echo $block->name; ?></option>
        <?php endforeach; ?>
                </select>
            </p>
            </body>
            </html>
            <?php
            die;
        }

        /**
         * Reads the options and checks for which post ID no adds should be displayed.
         *
         * @param $options array settings for this plugin
         * @return array list of post IDs for which no adds should be displayed
         */
        public function get_suppress_post_id($options)
        {
            $suppress_post_id = array();

            foreach (explode(',', $options['suppress-post-id']->value) as $id) {
                $id2 = explode('-', $id);
                if (count($id2) == 1) {
                    array_push($suppress_post_id, $id2[0]);
                } else {
                    for ($i = $id2[0]; $i <= $id2[1]; $i++) {
                        array_push($suppress_post_id, $i);
                    }
                }
            }
            return $suppress_post_id;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_url($options)
        {
            $suppress_url = array();

            foreach (explode(',', $options['suppress-url']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_url, $id);
                }
            }
            return $suppress_url;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_ipaddress($options)
        {
            $suppress_ipaddress = array();

            foreach (explode(',', $options['suppress-ipaddress']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_ipaddress, $id);
                }
            }
            return $suppress_ipaddress;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_referrer($options)
        {
            $suppress_referrer = array();

            foreach (explode(',', $options['suppress-referrer']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_referrer, $id);
                }
            }
            return $suppress_referrer;
        }

	    /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_category($options)
        {
            $suppress_category = array();

            foreach (explode(',', $options['suppress-category']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_category, $id);
                }
            }
            return $suppress_category;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_tag($options)
        {
            $suppress_tag = array();

            foreach (explode(',', $options['suppress-tag']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_tag, $id);
                }
            }
            return $suppress_tag;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_user($options)
        {
            $suppress_user = array();

            foreach (explode(',', $options['suppress-user']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_user, $id);
                }
            }
            return $suppress_user;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_format($options)
        {
            $suppress_format = array();

            foreach (explode(',', $options['suppress-format']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_format, $id);
                }
            }
            return $suppress_format;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_post_type($options)
        {
            $suppress_post_type = array();

            foreach (explode(',', $options['suppress-post-type']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_post_type, $id);
                }
            }
            return $suppress_post_type;
        }

        /**
         * @param $options array settings for this plugin
         * @return array
         */
        public function get_suppress_language($options)
        {
            $suppress_language = array();

            foreach (explode(',', $options['suppress-language']->value) as $id) {
                if ($id != "" && $id !== 0) {
                    array_push($suppress_language, $id);
                }
            }
            return $suppress_language;
        }

        /**
         * @param $needle
         * @param $haystack
         * @return bool
         */
        public function in_array_substr($needle, $haystack)
        {
            foreach ($haystack as $hay_item) {
                if ($hay_item !== "" && strpos($needle, $hay_item)) {
                    return true;
                }
            }
            return false;
        }

        /**
         * @param $options array settings for this plugin
         * @param $content string contents of the current post
         * @return bool
         */
        public function is_suppress_specific($options, $content)
        {
            $suppress_category = $this->get_suppress_category($options);
            $suppress_tag = $this->get_suppress_tag($options);
            $suppress_user = $this->get_suppress_user($options);
            $suppress_format = $this->get_suppress_format($options);
            $suppress_post_type = $this->get_suppress_post_type($options);

            return ((is_array($suppress_format) && count($suppress_format) > 0 && in_array(get_post_format(), $suppress_format))
                || (is_array($suppress_user) && count($suppress_user) > 0 && in_array(get_the_author_meta('ID'), $suppress_user))
                || (is_array($suppress_tag) && count($suppress_tag) > 0 && has_tag($suppress_tag))
                || (is_array($suppress_category) && count($suppress_category) > 0 && has_category($suppress_category))
                || (is_array($suppress_post_type) && count($suppress_post_type) > 0 && in_array(get_post_type(get_the_ID()), $suppress_post_type))
                || (!is_feed() && !is_home() && strpos($content, '<!--NoAds-->') !== false)
                || (!is_feed() && !is_home() && strpos($content, '<!--NoWidgetAds-->') !== false)
                || (is_page() && isset($options['suppress-on-pages']->value) && $options['suppress-on-pages']->value == 1)
                || (is_attachment() && isset($options['suppress-on-attachment']->value) && $options['suppress-on-attachment']->value == 1)
                || (is_category() && isset($options['suppress-on-category']->value) && $options['suppress-on-category']->value == 1)
                || (is_tag() && isset($options['suppress-on-tag']->value) && $options['suppress-on-tag']->value == 1)
                || (is_home() && isset($options['suppress-on-home']->value) && $options['suppress-on-home']->value == 1)
                || (is_front_page() && isset($options['suppress-on-front']->value) && $options['suppress-on-front']->value == 1)
                || (is_archive() && isset($options['suppress-on-archive']->value) && $options['suppress-on-archive']->value == 1)
                || (is_author() && isset($options['suppress-on-author']->value) && $options['suppress-on-author']->value == 1)
                || (is_404() && isset($options['suppress-on-error']->value) && $options['suppress-on-error']->value == 1)
                || (function_exists('bnc_wptouch_is_mobile') && bnc_wptouch_is_mobile() && $options['suppress-on-wptouch']->value == 1)
                || (function_exists('wptouch_is_mobile_theme_showing') && wptouch_is_mobile_theme_showing() && $options['suppress-on-wptouch']->value == 1)
                || (is_user_logged_in() && isset($options['suppress-on-logged-in']->value) && $options['suppress-on-logged-in']->value == 1)
            );
        }

        /**
         * Counts the number of HTML paragraphs in the provided content.
         *
         * @param $content string contents of the current post
         * @return int the number of HTML paragraphs in the provided content.
         */
        public function get_paragraph_count($content)
        {
            return substr_count($content, '</p>');
        }

        /**
         * Counts the words in the provided content after stripping all HTML tags
         *
         * @param $content string contents of the current post
         * @return int the number of words in the provided content
         */
        public function get_word_count($content)
        {
            return str_word_count(strip_tags($content));
        }

        /**
         * Counts the characters in the provided content after stripping all HTML tags
         *
         * @param $content string contents of the current post
         * @return int the number of characters in the provided content
         */
        public function get_character_count($content)
        {
            return strlen(strip_tags($content));
        }

        /**
         * Adds the ad blocks to be displayed in the provided contents
         *
         * @param $content string contents of the current post
         * @return string the post contents with the additionally configured ad blocks
         */
        public function show_ad_in_content($content)
        {
            global $homepage_below_title_count;
            if (!isset($homepage_below_title_count)) $homepage_below_title_count = 0;

            $homepage_below_title = "";
            $post_below_title = "";
            $post_below_content = "";
            $page_below_title = "";
            $page_below_content = "";

            $content = str_replace('</P>', '</p>', $content);
            $cleaned_content = $this->get_cleaned_content($content);

            $char_count = $this->get_character_count($content);
            $word_count = $this->get_word_count($content);
            $paragraph_count = $this->get_paragraph_count($cleaned_content);

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content)) {
                return $content;
            }

            $blocks = $this->RemoveSuppressBlocks($this->modules['WPAI_Settings']->settings['blocks'], $content);

            //checking placement settings for each placement

            if($this->is_placement_suppress_specific('homepage-below-title')) {
                $homepage_below_title_block = 0;
            } else {
                $homepage_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['homepage-below-title']->blockid; 
            }
            
            if($this->is_placement_suppress_specific('post-below-title')) {
                $post_below_title_block = 0;
            } else {
                $post_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-title']->blockid; 
            }

            if($this->is_placement_suppress_specific('post-below-content')) {
                $post_below_content_block = 0;
            } else {
                $post_below_content_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-content']->blockid; 
            }

            if($this->is_placement_suppress_specific('page-below-title')) {
                $page_below_title_block = 0;
            } else {
                $page_below_title_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-title']->blockid; 
            }
            
            if($this->is_placement_suppress_specific('page-below-content')) {
                $page_below_content_block = 0;
            } else {
                $page_below_content_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-content']->blockid;
            }
            
            if($this->is_placement_suppress_specific('middle-of-post')) {
                $middle_of_post_block = 0;
            } else {
                $middle_of_post_block = $this->modules['WPAI_Settings']->settings['placements']['middle-of-post']->blockid;
            }

            if($this->is_placement_suppress_specific('middle-of-page')) {
                $middle_of_page_block = 0;
            } else {
                $middle_of_page_block = $this->modules['WPAI_Settings']->settings['placements']['middle-of-page']->blockid;
            }
            
            if($this->is_placement_suppress_specific('before-last-post-paragraph')) {
                $before_last_post_paragraph_block = 0;
            } else {
                $before_last_post_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['before-last-post-paragraph']->blockid;
            }
            
            if($this->is_placement_suppress_specific('before-last-page-paragraph')) {
                $before_last_page_paragraph_block = 0;
            } else {
                $before_last_page_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['before-last-page-paragraph']->blockid;
            }

            if($this->is_placement_suppress_specific('after-first-post-paragraph')) {
                $after_first_post_paragraph_block = 0;
            } else {
                $after_first_post_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['after-first-post-paragraph']->blockid;
            }

            if($this->is_placement_suppress_specific('after-first-page-paragraph')) {
                $after_first_page_paragraph_block = 0;
            } else {
                $after_first_page_paragraph_block = $this->modules['WPAI_Settings']->settings['placements']['after-first-page-paragraph']->blockid;
            }

            if (!is_feed() && strpos($content, '<!--NoHomePageAds-->') !== false) {
                $homepage_below_title_block = 0;
            }
            if (!is_feed() && strpos($content, '<!--NoBelowTitleAds-->') !== false) {
                $post_below_title_block = 0;
                $page_below_title_block = 0;
                $homepage_below_title_block = 0;
            }
            if (!is_feed() && strpos($content, '<!--NoBelowContentAds-->') !== false) {
                $post_below_content_block = 0;
                $page_below_content_block = 0;
                $homepage_below_title_block = 0;
            }
            if (!is_feed() && strpos($content, '<!--NoMiddleOfContentAds-->') !== false) {
                $middle_of_post_block = 0;
                $middle_of_page_block = 0;
            }
            if (!is_feed() && strpos($content, '<!--NoBeforeLastParagraphAds-->') !== false) {
                $before_last_post_paragraph_block = 0;
                $before_last_page_paragraph_block = 0;
            }
            if (!is_feed() && strpos($content, '<!--NoAfterFirstParagraphAds-->') !== false) {
                $after_first_post_paragraph_block = 0;
                $after_first_page_paragraph_block = 0;
            }

            if ($homepage_below_title_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['homepage-below-title']->priority;
                $homepage_below_title = WPAI_Settings::get_ad_block($blocks, $homepage_below_title_block, $priority);
            }
            if ($post_below_title_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['post-below-title']->priority;
                $post_below_title = WPAI_Settings::get_ad_block($blocks, $post_below_title_block, $priority);
            }
            if ($post_below_content_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['post-below-content']->priority;
                $post_below_content = WPAI_Settings::get_ad_block($blocks, $post_below_content_block, $priority);
            }
            if ($page_below_title_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['page-below-title']->priority;
                $page_below_title = WPAI_Settings::get_ad_block($blocks, $page_below_title_block, $priority);
            }
            if ($page_below_content_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['page-below-content']->priority;
                $page_below_content = WPAI_Settings::get_ad_block($blocks, $page_below_content_block, $priority);
            }

            if(is_single()) {
                $placement_min_counts = $this->get_placement_min_count_values('middle-of-post');
            } 
            else if (is_page()) {
                $placement_min_counts = $this->get_placement_min_count_values('middle-of-page');
            }

            if (is_single()
                && $middle_of_post_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['middle-of-post']->priority;
                $middle_of_post = WPAI_Settings::get_ad_block($blocks, $middle_of_post_block, $priority);
                $middle_paragraph = (int)($paragraph_count / 2);
                $index = 0;
                for ($i = 0; $i < $middle_paragraph; $i++) {
                    $index = strpos($cleaned_content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $middle_of_post, $index, 0);
                $cleaned_content = $this->get_cleaned_content($content);
            } else if (is_page()
                && $middle_of_page_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['middle-of-page']->priority;
                $middle_of_page = WPAI_Settings::get_ad_block($blocks, $middle_of_page_block, $priority);
                $middle_paragraph = (int)($paragraph_count / 2);
                $index = 0;
                for ($i = 0; $i < $middle_paragraph; $i++) {
                    $index = strpos($cleaned_content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $middle_of_page, $index, 0);
                $cleaned_content = $this->get_cleaned_content($content);
            }

            if(is_single()) {
                $placement_min_counts = $this->get_placement_min_count_values('before-last-post-paragraph');
            } 
            else if (is_page()) {
                $placement_min_counts = $this->get_placement_min_count_values('before-last-page-paragraph');
            }

            if (is_single()
                && $before_last_post_paragraph_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['before-last-post-paragraph']->priority;
                $before_last_post_paragraph = WPAI_Settings::get_ad_block($blocks, $before_last_post_paragraph_block, $priority);
                $index = 0;
                for ($i = 0; $i < $paragraph_count - 1; $i++) {
                    $index = strpos($cleaned_content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $before_last_post_paragraph, $index, 0);
                $cleaned_content = $this->get_cleaned_content($content);
            } else if (is_page()
                && $before_last_page_paragraph_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['before-last-page-paragraph']->priority;
                $before_last_page_paragraph = WPAI_Settings::get_ad_block($blocks, $before_last_page_paragraph_block, $priority);
                $index = 0;
                for ($i = 0; $i < $paragraph_count - 1; $i++) {
                    $index = strpos($cleaned_content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $before_last_page_paragraph, $index, 0);
                $cleaned_content = $this->get_cleaned_content($content);
            }

            if(is_single()) {
                $placement_min_counts = $this->get_placement_min_count_values('after-first-post-paragraph');
            } 
            else if (is_page()) {
                $placement_min_counts = $this->get_placement_min_count_values('after-first-page-paragraph');
            }

            if (is_single()
                && $after_first_post_paragraph_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['after-first-post-paragraph']->priority;
                $after_first_post_paragraph = WPAI_Settings::get_ad_block($blocks, $after_first_post_paragraph_block, $priority);
                $index = 0;
                for ($i = 0; $i < 1; $i++) {
                    $index = strpos($cleaned_content, '</p>', $index) + 4;
                }
                $content = substr_replace($content, $after_first_post_paragraph, $index, 0);
            } else if (is_page()
                && $after_first_page_paragraph_block != 0
                && intval($placement_min_counts['min-char-count']->value) <= $char_count
                && intval($placement_min_counts['min-word-count']->value) <= $word_count
                && intval($placement_min_counts['min-paragraph-count']->value) <= $paragraph_count
            ) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['after-first-page-paragraph']->priority;
                $after_first_page_paragraph = WPAI_Settings::get_ad_block($blocks, $after_first_page_paragraph_block, $priority);
                $index = 0;
                for ($i = 0; $i < 1; $i++) {
                    $index = strpos($content, '</p>', $index) + 4;
                }
                $content = substr_replace($cleaned_content, $after_first_page_paragraph, $index, 0);
            }
            if (is_single()) {
                return $post_below_title . $content . $post_below_content;
            } else if (is_home()) {
                if (empty($options['homepage-below-title-max']->value) || $homepage_below_title_count < $options['homepage-below-title-max']->value) {
                    $homepage_below_title_count++;
                    return $homepage_below_title . $content;
                } else {
                    return $content;
                }
            } else if (is_page()) {
                return $page_below_title . $content . $page_below_content;
            } else {
                return $content;
            }
        }

        /**
         * Displays ad blocks at regular intervals between posts in a multi-post page
         *
         * @param $post WP_Post the current post in a multi-post page
         */
        public function show_ad_between_posts($post)
        {
            global $wp_query;
			
            //added in_the_loop() to avoid insert in other post listings, e.g. in recent posts 
            if ((!in_the_loop()) || ((!is_home()) && (!is_archive())) || $wp_query->post != $post || 0 == $wp_query->current_post || $this->is_placement_suppress_specific('between-posts')) {
                return;
            }

            $options = $this->modules['WPAI_Settings']->settings['options'];
            $every = isset($options['between-posts-every']->value) ? intval($options['between-posts-every']->value) : 0;
            $max = isset($options['between-posts-max']->value) ? intval($options['between-posts-max']->value) : 0;

            if ($every > 0 && $wp_query->current_post % $every == 0 && $wp_query->current_post <= $every * $max) {
                $blocks = $this->modules['WPAI_Settings']->settings['blocks'];
                $between_posts_block = $this->modules['WPAI_Settings']->settings['placements']['between-posts']->blockid;
                if (isset($between_posts_block) && $between_posts_block != 0) {
                    $priority = $this->modules['WPAI_Settings']->settings['placements']['between-posts']->priority;
                    echo WPAI_Settings::get_ad_block($blocks, $between_posts_block, $priority);
                }
            }
        }

        /**
         * Displays an ad block (if configured).
         * This function is called after the footer has been rendered. The ad block is thus displayed below the footer.
         */
        public function show_ad_below_footer()
        {
            $all_below_footer = "";

            $content = get_the_content();
            $blocks = $this->RemoveSuppressBlocks($this->modules['WPAI_Settings']->settings['blocks'], $content);
            $all_below_footer_block = $this->modules['WPAI_Settings']->settings['placements']['all-below-footer']->blockid;

            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content) || $this->is_placement_suppress_specific('all-below-footer')) {
                return;
            }

            if ($all_below_footer_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['all-below-footer']->priority;
                $all_below_footer = WPAI_Settings::get_ad_block($blocks, $all_below_footer_block, $priority);
            }

            echo $all_below_footer;
        }

        /**
         * Displays an ad block (if configured).
         * This function is called after the comment section has been rendered. The ad block is thus displayed below the comment section.
         */
        public function show_ad_below_comments()
        {
            $post_below_comments = "";
            $page_below_comments = "";

            $content = get_the_content();
            $blocks = $this->RemoveSuppressBlocks($this->modules['WPAI_Settings']->settings['blocks'], $content);

            if($this->is_placement_suppress_specific('post-below-comments')) {
                $post_below_comments_block = 0;
            } else {
                $post_below_comments_block = $this->modules['WPAI_Settings']->settings['placements']['post-below-comments']->blockid;
            }

            if($this->is_placement_suppress_specific('page-below-comments')) {
                $page_below_comments_block = 0;
            } else {
                $page_below_comments_block = $this->modules['WPAI_Settings']->settings['placements']['page-below-comments']->blockid;
            }
            
            $options = $this->modules['WPAI_Settings']->settings['options'];

            if ($this->is_suppress_specific($options, $content)) {
                return;
            }

            if ($post_below_comments_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['post-below-comments']->priority;
                $post_below_comments = WPAI_Settings::get_ad_block($blocks, $post_below_comments_block, $priority);
            }
            if ($page_below_comments_block != 0) {
                $priority = $this->modules['WPAI_Settings']->settings['placements']['page-below-comments']->priority;
                $page_below_comments = WPAI_Settings::get_ad_block($blocks, $page_below_comments_block, $priority);
            }

            if (is_single()) {
                echo $post_below_comments;
            } else if (is_page()) {
                echo $page_below_comments;
            }
        }

        /**
         * Initializes variables
         *
         * @mvc Controller
         */
        public function init()
        {
            try {
                $instance_example = new WPAI_Instance_Class('Instance example', '42');
                //add_notice( $instance_example->foo .' '. $instance_example->bar );
            } catch (Exception $exception) {
                add_notice(__METHOD__ . ' error: ' . $exception->getMessage(), 'error');
            }
        }

        /**
         * Checks if the plugin was recently updated and upgrades if necessary
         *
         * @mvc Controller
         *
         * @param string $db_version
         */
        public function upgrade($db_version = 0)
        {
        	$alloptions = get_option('wpai_settings',false,false);
        	
            if (version_compare($alloptions['db-version'], self::VERSION, '==')) {
                return;
            }

            foreach ($this->modules as $module) {
                $module->upgrade($alloptions['db-version']);
            }

            $alloptions['db-version'] = self::VERSION;
            //$this->modules['WPAI_Settings']->settings['db-version'] = self::VERSION;
            update_option('wpai_settings',  $alloptions);
            
            self::clear_caching_plugins();
        }

        /**
         * Removes the ad blocks which are disabled with the NoAdBlock comment in the post contents.
         *
         * @param $blocks array all configured ad blocks
         * @param $content string contents of the current post
         *
         * @return mixed the remaining ad blocks
         */
        private function RemoveSuppressBlocks($blocks, $content)
        {
            foreach ($blocks as $number => $code) {
                if (strpos($content, '<!--NoAdBlock' . ($number + 1) . '-->') !== false) {
                    $blocks[$number]['default_ads'] = 0;
                }
            }

            return $blocks;
        }

        /**
         * Checks that the object is in a correct state
         *
         * @mvc Model
         *
         * @param string $property An individual property to check, or 'all' to check all of them
         * @return bool
         */
        protected function is_valid($property = 'all')
        {
            return true;
        }

        private function get_cleaned_content($content)
        {
            $new_content = $content;

            $new_content = $this->censor_blockquote($new_content);
            $new_content = $this->censor_pre($new_content);
            $new_content = $this->censor_code($new_content);

            return $new_content;
        }

        /**
         * @param $content
         * @return mixed|string
         */
        private function censor_blockquote($content)
        {
            $array = preg_split("/<blockquote>/", $content);
            $new_content = array_shift($array);
            foreach ($array as $string) {
                $new_content .= "<blockquote>";
                $array2 = preg_split(",</blockquote>,", $string);
                $new_content .= preg_replace("/./", " ", array_shift($array2));
                $new_content .= "</blockquote>";
                if (!empty($array2)) {
                    $new_content .= $array2[0];
                }
            }
            return $new_content;
        }

        /**
         * @param $content
         * @return mixed|string
         */
        private function censor_pre($content)
        {
            $array = preg_split("/<pre>/", $content);
            $new_content = array_shift($array);
            foreach ($array as $string) {
                $new_content .= "<pre>";
                $array2 = preg_split(",</pre>,", $string);
                $new_content .= preg_replace("/./", " ", array_shift($array2));
                $new_content .= "</pre>";
                if (!empty($array2)) {
                    $new_content .= $array2[0];
                }
            }
            return $new_content;
        }

        /**
         * @param $content
         * @return mixed|string
         */
        private function censor_code($content)
        {
            $array = preg_split("/<code>/", $content);
            $new_content = array_shift($array);
            foreach ($array as $string) {
                $new_content .= "<code>";
                $array2 = preg_split(",</code>,", $string);
                $new_content .= preg_replace("/./", " ", array_shift($array2));
                $new_content .= "</code>";
                if (!empty($array2)) {
                    $new_content .= $array2[0];
                }
            }
            return $new_content;
        }

        /**
         * Checks the particular placement should be suppressed
         * @param $placement_name
         * @return bool
         */
        public function is_placement_suppress_specific($placement_name)
        {
            if($placement_name == 'widget') {
                $placementid = 0;//to get the common settings
            }
            else {
                $placementid = $this->modules['WPAI_Settings']->settings['placements'][$placement_name]->id;
            }

            $placementSettings = WPAI_DB::wpai_get_placement_settings($placementid);

            $suppress_post_id = $this->get_suppress_post_id($placementSettings);
            $suppress_language = $this->get_suppress_language($placementSettings);
            $suppress_url = $this->get_suppress_url($placementSettings);
            $suppress_referrer = $this->get_suppress_referrer($placementSettings);
            $suppress_ipaddress = $this->get_suppress_ipaddress($placementSettings);

            return ((is_single() && isset($placementSettings['suppress-on-posts']->value) && $placementSettings['suppress-on-posts']->value == 1)
                || (!is_feed() && !is_home() && in_array(get_the_ID(), $suppress_post_id))
                || (is_array($suppress_language) && count($suppress_language) > 0 && function_exists('qtranxf_getLanguage') && in_array(qtranxf_getLanguage(), $suppress_language))
                || (is_array($suppress_url) && count($suppress_url) > 0 && $this->in_array_substr(get_permalink(get_the_ID()), $suppress_url))
                || (is_array($suppress_referrer) && count($suppress_referrer) > 0 && $this->in_array_substr($_SERVER['HTTP_REFERER'], $suppress_referrer))
                || (is_array($suppress_ipaddress) && count($suppress_ipaddress) > 0 && $this->in_array_substr($_SERVER['REMOTE_ADDR'], $suppress_ipaddress))
            );
        }

        /**
         * Gets the min character, word and paragraph counts for a particular placement
         * @param $placement_name
         * @return array
         */
        public function get_placement_min_count_values($placement_name)
        {
            $placementid = $this->modules['WPAI_Settings']->settings['placements'][$placement_name]->id;
            $placementSettings = WPAI_DB::wpai_get_placement_settings($placementid);

            return array(
                'min-char-count' => $placementSettings['min-char-count'],
                'min-word-count' => $placementSettings['min-word-count'],
                'min-paragraph-count' => $placementSettings['min-paragraph-count']
            );
        }

	    /**
	     *The callback compare function - to sort ads based on priority
	     *
	     * @param $a
	     * @param $b
	     *
	     * @return int
	     */
        public function compare_priority($a, $b) 
        {
            if ($a['priority'] == $b['priority']) {
            	if($a['ads_id'] == $b['ads_id']){
                	return 0;
            	}else{
            		return ($a['ads_id'] < $b['ads_id'])?-1:1;
            	}
            }
            return ($a['priority'] < $b['priority'])?-1:1;
        }

    }
    ; // end WordPress_Advertize_It
}
